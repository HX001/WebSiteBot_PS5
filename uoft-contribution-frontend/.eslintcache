[{"C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\index.js":"1","C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\serviceWorker.js":"2","C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\App.js":"3","C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Footer.js":"4","C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Login.js":"5","C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Header.js":"6","C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Main.js":"7","C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\constants.js":"8","C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Home.js":"9","C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Payment.js":"10","C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\UserProfile.js":"11","C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Supplier.js":"12"},{"size":688,"mtime":1607873090522,"results":"13","hashOfConfig":"14"},{"size":5227,"mtime":1607873090524,"results":"15","hashOfConfig":"14"},{"size":2348,"mtime":1607873090514,"results":"16","hashOfConfig":"14"},{"size":354,"mtime":1607873090517,"results":"17","hashOfConfig":"14"},{"size":12940,"mtime":1607873090519,"results":"18","hashOfConfig":"14"},{"size":3788,"mtime":1608108979137,"results":"19","hashOfConfig":"14"},{"size":1036,"mtime":1608165525795,"results":"20","hashOfConfig":"14"},{"size":362,"mtime":1608165525797,"results":"21","hashOfConfig":"14"},{"size":1953,"mtime":1608256817933,"results":"22","hashOfConfig":"14"},{"size":2185,"mtime":1608165525795,"results":"23","hashOfConfig":"14"},{"size":8932,"mtime":1608165525796,"results":"24","hashOfConfig":"14"},{"size":2540,"mtime":1608165525796,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1g3szyf",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\index.js",[],["55","56"],"C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\serviceWorker.js",[],"C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\App.js",[],"C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Footer.js",[],"C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Login.js",["57","58"],"import React, {Component} from 'react';\r\nimport { Modal, Button, Form } from 'react-bootstrap'\r\nimport { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport Axios from 'axios';\r\nimport { URL, TOKEN_KEY, ID, PASSWORD} from '../constants';\r\n\r\nclass Login extends Component {\r\n\r\n    //Schemas used to validate input of form.\r\n    RegisterSchema = yup.object({\r\n        email: yup.string().email('Invalid email address').required('Email is required'),\r\n        password: yup.string().required('Password is required'),\r\n        confirm_password: yup.string()\r\n            .oneOf([yup.ref('password'), null], \"Password does not match\")\r\n            .required('Password confirm is required'),\r\n    })\r\n    LoginSchema = yup.object({\r\n        email: yup.string().email('Invalid email address').required('Email is required'),\r\n        password: yup.string().required('Password is required'),\r\n    })\r\n\r\n    //When forms close, need to set the state of its parent(App) back to false.\r\n\r\n    switchToRegister = () => {\r\n        this.props.showLoginForm(false);\r\n        this.props.showRegisterForm(true);\r\n    }\r\n\r\n    switchToLogin = () => {\r\n        this.props.showRegisterForm(false);\r\n        this.props.showLoginForm(true);\r\n    }\r\n\r\n    hideRegisterForm = () => {\r\n        this.props.showRegisterForm(false);\r\n    };\r\n\r\n    hideLoginForm = () => {\r\n        this.props.showLoginForm(false);\r\n    }\r\n\r\n    //This function is to send the login request message to the back end server with corresponding messages: password, email address\r\n    //email address should be unique\r\n    handleSubmitLogin = (event, { setSubmitting }) => {\r\n        console.log(\"I'm in Login\")\r\n        const url = `${URL}/users/login`;\r\n        Axios({\r\n            method: 'POST',\r\n            url: url,\r\n            data: {\r\n                email: event.email,\r\n                password: event.password            }\r\n        })\r\n            .then(\r\n                response => {\r\n                    console.log(\"Response is: \", response)\r\n                    if (response.data.status === \"success\") {\r\n                        // localStorage.setItem(TOKEN_KEY, response.data.token);\r\n                        localStorage.setItem(ID, event.email);\r\n                        alert(\"Login Success\")\r\n                        this.props.loggedIn();\r\n                        this.props.showLoginForm(false);\r\n                    } else {\r\n                        if (response.data.message === \"Username does not exist\") {\r\n                            alert(\"Username does not exist\")\r\n                        } else if (response.data.message === \"Password not matched\") {\r\n                            alert(\"Wrong password\")\r\n                        }\r\n\r\n                        console.log(\"Login failed\");\r\n                    }\r\n                    setSubmitting(false);\r\n                }\r\n            )\r\n            .catch(\r\n                err => {\r\n                    console.log(\"Login failed\");\r\n                }\r\n            )\r\n    }\r\n\r\n    //This function is to send the register request message to the back end server with corresponding messages: username, password, email address\r\n    //email address should be unique\r\n    handleSubmitRegister = (event) => {\r\n        console.log(\"I'm in register\")\r\n        const url = `${URL}/users/register`\r\n        Axios({\r\n            method: 'POST',\r\n            url: url,\r\n            data: {\r\n                email: event.email,\r\n                password: event.password,\r\n                userName: event.userName\r\n            }\r\n        })\r\n            .then(\r\n                response => {\r\n                    if (response.data.status === \"success\") {\r\n                        this.switchToLogin();\r\n                    } else {\r\n                        if (response.data.message === \"Username already exists\") {\r\n                            alert(\"This email has been registered. Please log in\")\r\n                        }\r\n                    }\r\n                }\r\n            )\r\n            .catch(\r\n                response => {\r\n                    console.log('failed')\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\".login\">\r\n                {/* Modal is the pop up window */}\r\n                {<Modal show={this.props.isLoginForm} onHide={this.hideLoginForm}>\r\n\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Sign In</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        {/* Formik and yup are used to validate input of form */}\r\n                        <Formik\r\n                            validationSchema={this.LoginSchema}\r\n                            onSubmit={this.handleSubmitLogin}\r\n                            initialValues={{\r\n                                email: '',\r\n                                password: '',\r\n                            }}\r\n                        >\r\n                            {/* Form start here */}\r\n                            {({ handleSubmit,\r\n                                  handleChange,\r\n                                  touched,\r\n                                  errors }) => (<Form noValidate onSubmit={handleSubmit}>\r\n                                    <Form.Group controlId=\"formBasicEmail\">\r\n                                        <Form.Label>Email address</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"email\"\r\n                                            placeholder=\"Enter email\"\r\n                                            name='email'\r\n                                            onChange={handleChange}\r\n                                            isInvalid={!!errors.email && touched.email}\r\n                                        />\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.email}\r\n                                        </Form.Control.Feedback>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"formBasicPassword\">\r\n                                        <Form.Label>Password</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"password\"\r\n                                            placeholder=\"Password\"\r\n                                            name='password'\r\n                                            onChange={handleChange}\r\n                                            isInvalid={!!errors.password && touched.password}\r\n                                        />\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.password}\r\n                                        </Form.Control.Feedback>\r\n                                    </Form.Group>\r\n\r\n                                    <Button size=\"sm\" block=\"true\" variant=\"link\" onClick={this.switchToRegister}>\r\n                                        Not registered? Sign up\r\n                                    </Button> {' '}\r\n                                    <Button block=\"true\" className=\"Submit_Buttom\" variant=\"primary\" type=\"submit\">\r\n                                        Log in\r\n                                    </Button>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                    </Modal.Body>\r\n                </Modal>}\r\n\r\n                {<Modal show={this.props.isRegisterForm} onHide={this.hideRegisterForm}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Register</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n\r\n                        <Formik\r\n                            validationSchema={this.RegisterSchema}\r\n                            onSubmit={this.handleSubmitRegister}\r\n                            initialValues={{\r\n                                email: '',\r\n                                password: '',\r\n                                confirm_password: '',\r\n                            }}\r\n                        >\r\n                            {({ handleSubmit,\r\n                                  handleChange,\r\n                                  touched,\r\n                                  errors }) => (<Form noValidate onSubmit={handleSubmit}>\r\n                                    <Form.Group controlId=\"formUserName\">\r\n                                        <Form.Label>Email Address</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"email\"\r\n                                            placeholder=\"Enter email\"\r\n                                            name='email'\r\n                                            onChange={handleChange}\r\n                                            isInvalid={!!errors.email && touched.email}\r\n                                        />\r\n                                        <Form.Text className=\"text-muted\">\r\n                                            We'll never share your email with anyone else.\r\n                                        </Form.Text>\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.email}\r\n                                        </Form.Control.Feedback>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group controlId=\"formBasicEmail\">\r\n                                        <Form.Label>UserName</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            placeholder=\"UserName\"\r\n                                            name='userName'\r\n                                            onChange={handleChange}\r\n                                            isInvalid={!!errors.userName && touched.userName}\r\n                                        />\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.userName}\r\n                                        </Form.Control.Feedback>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group controlId=\"formBasicPassword\">\r\n                                        <Form.Label>Password</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"password\"\r\n                                            placeholder=\"Password\"\r\n                                            name='password'\r\n                                            onChange={handleChange}\r\n                                            isInvalid={!!errors.password && touched.password}\r\n                                        />\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.password}\r\n                                        </Form.Control.Feedback>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group controlId=\"formConfirmPassword\">\r\n                                        <Form.Label>Confirm Password</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"password\"\r\n                                            placeholder=\"Password\"\r\n                                            name='confirm_password'\r\n                                            onChange={handleChange}\r\n                                            isInvalid={!!errors.confirm_password && touched.confirm_password}\r\n                                        />\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.confirm_password}\r\n                                        </Form.Control.Feedback>\r\n                                    </Form.Group>\r\n                                    <Button size=\"sm\" block=\"true\" variant=\"link\" onClick={this.switchToLogin}>\r\n                                        Already Registered? Log in\r\n                                    </Button> {' '}\r\n                                    <Button block=\"true\" className=\"Submit_Buttom\" variant=\"primary\" type=\"submit\">\r\n                                        Join Us!\r\n                                    </Button>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                    </Modal.Body>\r\n                </Modal>}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Header.js",[],"C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Main.js",["59","60"],"import React, {Component} from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Home from \"./Home\";\r\nimport UserProfile from \"./UserProfile\";\r\nimport Payment from \"./Payment\";\r\nimport Supplier from \"./Supplier\";\r\n\r\n\r\nclass Main extends Component {\r\n\r\n    render() {\r\n        const isLoggedIn = this.props.isLoggedIn;\r\n        return (\r\n            <div className=\"main\">\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <Home />\r\n                    </Route>\r\n                    \r\n                    <Route exact path=\"/UserProfile\">\r\n                        <UserProfile />\r\n                    </Route>\r\n\r\n                    <Route exact path=\"/payment\">\r\n                        <Payment />\r\n                    </Route>\r\n\r\n                    <Route exact path=\"/suppliers\">\r\n                        <Supplier />\r\n                    </Route>\r\n\r\n\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\constants.js",[],"C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Home.js",["61","62","63","64","65"],"C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Payment.js",["66","67","68","69","70"],"import React, {Component} from 'react';\r\nimport StripeCheckout from 'react-stripe-checkout';\r\nimport {STRIPE_KEY} from \"../constants\";\r\nimport Elements, {StripeProvider} from 'react-stripe-elements';\r\nimport StripeScriptLoader from 'react-stripe-script-loader'\r\nimport {CardElement} from 'react-stripe-elements';\r\nimport {CardNumberElement} from \"@stripe/react-stripe-js\";\r\n// import {CardElement, Elements, ElementsConsumer} from '@stripe/react-stripe-js';\r\n\r\nclass Payment extends Component {\r\n    onToken = (token, addresses) => {\r\n        // TODO: Send the token information and any other\r\n        // relevant information to your payment process\r\n        // server, wait for the response, and update the UI\r\n        // accordingly. How this is done is up to you. Using\r\n        // XHR, fetch, or a GraphQL mutation is typical.\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/*<div>*/}\r\n                {/*    <StripeScriptLoader*/}\r\n                {/*        uniqueId=\"myUniqueId\"*/}\r\n                {/*        script=\"https://js.stripe.com/v3/\"*/}\r\n                {/*        loader=\"Loading...\"*/}\r\n                {/*    >*/}\r\n                {/*        <StripeProvider apiKey=\"stripeApiKey\">*/}\r\n                {/*            <Elements>*/}\r\n                {/*                <CardNumberElement />*/}\r\n                {/*            </Elements>*/}\r\n                {/*        </StripeProvider>*/}\r\n                {/*    </StripeScriptLoader>*/}\r\n                {/*</div>*/}\r\n\r\n                <div>\r\n                    <StripeCheckout\r\n                        amount=\"500\"\r\n                        billingAddress\r\n                        description=\"Awesome Product\"\r\n                        image=\"https://yourdomain.tld/images/logo.svg\"\r\n                        locale=\"auto\"\r\n                        name=\"YourDomain.tld\"\r\n                        stripeKey={STRIPE_KEY}\r\n                        token={this.onToken}\r\n                        zipCode\r\n                    />\r\n                </div>\r\n\r\n\r\n                {/*<StripeProvider apiKey=\"pk_test_12345\">*/}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Payment;","C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\UserProfile.js",["71","72","73","74","75"],"import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { FormControl, FormLabel, InputLabel, MenuItem, Radio, RadioGroup, Button } from '@material-ui/core'\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass UserProfile extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.SaveContent = this.saveContent.bind(this);\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n        console.log(this.state)\r\n    }\r\n\r\n    saveContent=()=> {\r\n\r\n        console.log('save');\r\n    }\r\n    render() {\r\n        const mystyle = {\r\n            color: \"white\",\r\n            backgroundColor: \"DodgerBlue\",\r\n            padding: \"10px\",\r\n            fontFamily: \"Arial\"\r\n        };\r\n\r\n        return (\r\n            <Container maxWidth=\"md\">\r\n                <React.Fragment>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                        Personal Information\r\n                    </Typography>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                required\r\n                                id=\"firstName\"\r\n                                name=\"firstName\"\r\n                                label=\"First name\"\r\n                                value={this.state.firstName}\r\n                                onChange={this.handleInputChange}\r\n                                fullWidth\r\n                                autoComplete=\"given-name\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                required\r\n                                id=\"lastName\"\r\n                                name=\"lastName\"\r\n                                label=\"Last name\"\r\n                                onChange={this.handleInputChange}\r\n                                fullWidth\r\n                                autoComplete=\"family-name\"\r\n                                value={this.state.lastName}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"name\"\r\n                                label=\"Email Address\"\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                value={this.state.email}\r\n                                fullWidth\r\n                                onChange={this.handleInputChange}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <FormControl component=\"fieldset\">\r\n                                <FormLabel component=\"legend\">Gender</FormLabel>\r\n                                <RadioGroup row aria-label=\"gender\" name=\"gender1\" value={this.state.gender} onChange={this.handleInputChange}>\r\n                                    <FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" />\r\n                                    <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\r\n                                    <FormControlLabel value=\"other\" control={<Radio />} label=\"Other\" />\r\n                                    {/* <FormControlLabel value=\"disabled\" disabled control={<Radio />} label=\"(Disabled option)\" /> */}\r\n                                </RadioGroup>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                id=\"date\"\r\n                                label=\"Birthday\"\r\n                                name=\"birthday\"\r\n                                type=\"date\"\r\n                                defaultValue=\"\"\r\n                                onChange={this.handleInputChange}\r\n                                value={this.state.birthday}\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                required\r\n                                id=\"address1\"\r\n                                name=\"address1\"\r\n                                label=\"Address line 1\"\r\n                                fullWidth\r\n                                value={this.state.address1}\r\n                                autoComplete=\"shipping address-line1\"\r\n                                onChange={this.handleInputChange}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                id=\"address2\"\r\n                                name=\"address2\"\r\n                                label=\"Address line 2\"\r\n                                fullWidth\r\n                                autoComplete=\"shipping address-line2\"\r\n                                onChange={this.handleInputChange}\r\n                                value={this.state.address2}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                required\r\n                                id=\"city\"\r\n                                name=\"city\"\r\n                                label=\"City\"\r\n                                fullWidth\r\n                                autoComplete=\"shipping address-level2\"\r\n                                onChange={this.handleInputChange}\r\n                                value={this.state.city}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField id=\"state\" name=\"state\" label=\"State/Province/Region\" fullWidth\r\n                                       onChange={this.handleInputChange}\r\n                                       value={this.state.state}/>\r\n\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                required\r\n                                id=\"zip\"\r\n                                name=\"zip\"\r\n                                label=\"Zip / Postal code\"\r\n                                fullWidth\r\n                                autoComplete=\"shipping postal-code\"\r\n                                onChange={this.handleInputChange}\r\n                                value={this.state.zip}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                required\r\n                                id=\"country\"\r\n                                name=\"country\"\r\n                                label=\"Country\"\r\n                                fullWidth\r\n                                autoComplete=\"shipping country\"\r\n                                onChange={this.handleInputChange}\r\n                                value={this.state.country}\r\n                            />\r\n\r\n                        </Grid>\r\n                        <Grid Grid item xs={12} >\r\n                            <Link to=\"/payment\" className=\"btn btn-primary\">\r\n                                SAVE\r\n                            </Link>\r\n\r\n                        </Grid>\r\n\r\n                        {/* <Grid item xs={12}>\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"secondary\" name=\"saveAddress\" value=\"yes\" />}\r\n                                label=\"Use this address for payment details\"\r\n                            />\r\n                        </Grid> */}\r\n                    </Grid>\r\n                </React.Fragment>\r\n            </Container>\r\n        );\r\n    };\r\n}\r\n\r\nexport default UserProfile;","C:\\Users\\isamu\\Desktop\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Supplier.js",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":6,"column":15,"nodeType":"82","messageId":"83","endLine":6,"endColumn":24},{"ruleId":"80","severity":1,"message":"84","line":6,"column":30,"nodeType":"82","messageId":"83","endLine":6,"endColumn":38},{"ruleId":"80","severity":1,"message":"85","line":2,"column":27,"nodeType":"82","messageId":"83","endLine":2,"endColumn":33},{"ruleId":"80","severity":1,"message":"86","line":12,"column":15,"nodeType":"82","messageId":"83","endLine":12,"endColumn":25},{"ruleId":"80","severity":1,"message":"87","line":5,"column":20,"nodeType":"82","messageId":"83","endLine":5,"endColumn":23},{"ruleId":"80","severity":1,"message":"88","line":5,"column":25,"nodeType":"82","messageId":"83","endLine":5,"endColumn":28},{"ruleId":"80","severity":1,"message":"89","line":20,"column":18,"nodeType":"82","messageId":"83","endLine":20,"endColumn":27},{"ruleId":"80","severity":1,"message":"90","line":26,"column":18,"nodeType":"82","messageId":"83","endLine":26,"endColumn":28},{"ruleId":"80","severity":1,"message":"91","line":30,"column":15,"nodeType":"82","messageId":"83","endLine":30,"endColumn":25},{"ruleId":"80","severity":1,"message":"92","line":4,"column":8,"nodeType":"82","messageId":"83","endLine":4,"endColumn":16},{"ruleId":"80","severity":1,"message":"93","line":4,"column":19,"nodeType":"82","messageId":"83","endLine":4,"endColumn":33},{"ruleId":"80","severity":1,"message":"94","line":5,"column":8,"nodeType":"82","messageId":"83","endLine":5,"endColumn":26},{"ruleId":"80","severity":1,"message":"95","line":6,"column":9,"nodeType":"82","messageId":"83","endLine":6,"endColumn":20},{"ruleId":"80","severity":1,"message":"96","line":7,"column":9,"nodeType":"82","messageId":"83","endLine":7,"endColumn":26},{"ruleId":"80","severity":1,"message":"97","line":6,"column":8,"nodeType":"82","messageId":"83","endLine":6,"endColumn":16},{"ruleId":"80","severity":1,"message":"98","line":8,"column":34,"nodeType":"82","messageId":"83","endLine":8,"endColumn":44},{"ruleId":"80","severity":1,"message":"99","line":8,"column":46,"nodeType":"82","messageId":"83","endLine":8,"endColumn":54},{"ruleId":"80","severity":1,"message":"100","line":8,"column":75,"nodeType":"82","messageId":"83","endLine":8,"endColumn":81},{"ruleId":"80","severity":1,"message":"101","line":37,"column":15,"nodeType":"82","messageId":"83","endLine":37,"endColumn":22},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"no-unused-vars","'TOKEN_KEY' is defined but never used.","Identifier","unusedVar","'PASSWORD' is defined but never used.","'Router' is defined but never used.","'isLoggedIn' is assigned a value but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'handlePS5' is defined but never used.","'handleXbox' is defined but never used.","'imageClick' is assigned a value but never used.","'Elements' is defined but never used.","'StripeProvider' is defined but never used.","'StripeScriptLoader' is defined but never used.","'CardElement' is defined but never used.","'CardNumberElement' is defined but never used.","'Checkbox' is defined but never used.","'InputLabel' is defined but never used.","'MenuItem' is defined but never used.","'Button' is defined but never used.","'mystyle' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]