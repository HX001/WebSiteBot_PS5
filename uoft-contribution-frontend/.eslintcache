[{"C:\\Users\\isamu\\Desktop\\GITHUB repos\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\index.js":"1","C:\\Users\\isamu\\Desktop\\GITHUB repos\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\serviceWorker.js":"2","C:\\Users\\isamu\\Desktop\\GITHUB repos\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\App.js":"3","C:\\Users\\isamu\\Desktop\\GITHUB repos\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Footer.js":"4","C:\\Users\\isamu\\Desktop\\GITHUB repos\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Header.js":"5","C:\\Users\\isamu\\Desktop\\GITHUB repos\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Main.js":"6","C:\\Users\\isamu\\Desktop\\GITHUB repos\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\constants.js":"7","C:\\Users\\isamu\\Desktop\\GITHUB repos\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Login.js":"8","C:\\Users\\isamu\\Desktop\\GITHUB repos\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Home.js":"9"},{"size":688,"mtime":1607873090522,"results":"10","hashOfConfig":"11"},{"size":5227,"mtime":1607873090524,"results":"12","hashOfConfig":"11"},{"size":2348,"mtime":1607873090514,"results":"13","hashOfConfig":"11"},{"size":354,"mtime":1607873090517,"results":"14","hashOfConfig":"11"},{"size":3788,"mtime":1608108979137,"results":"15","hashOfConfig":"11"},{"size":531,"mtime":1607873090520,"results":"16","hashOfConfig":"11"},{"size":179,"mtime":1607873090521,"results":"17","hashOfConfig":"11"},{"size":12940,"mtime":1607873090519,"results":"18","hashOfConfig":"11"},{"size":1235,"mtime":1608116240095,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"vbbgbe",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\isamu\\Desktop\\GITHUB repos\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\index.js",[],["41","42"],"C:\\Users\\isamu\\Desktop\\GITHUB repos\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\serviceWorker.js",[],"C:\\Users\\isamu\\Desktop\\GITHUB repos\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\App.js",[],"C:\\Users\\isamu\\Desktop\\GITHUB repos\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Footer.js",[],"C:\\Users\\isamu\\Desktop\\GITHUB repos\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Header.js",[],"C:\\Users\\isamu\\Desktop\\GITHUB repos\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Main.js",["43","44"],"import React, {Component} from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Home from \"./Home\";\r\n\r\nclass Main extends Component {\r\n\r\n    render() {\r\n        const isLoggedIn = this.props.isLoggedIn;\r\n        return (\r\n            <div className=\"main\">\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <Home />\r\n                    </Route>\r\n\r\n\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","C:\\Users\\isamu\\Desktop\\GITHUB repos\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\constants.js",[],"C:\\Users\\isamu\\Desktop\\GITHUB repos\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Login.js",["45","46"],"import React, {Component} from 'react';\r\nimport { Modal, Button, Form } from 'react-bootstrap'\r\nimport { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport Axios from 'axios';\r\nimport { URL, TOKEN_KEY, ID, PASSWORD} from '../constants';\r\n\r\nclass Login extends Component {\r\n\r\n    //Schemas used to validate input of form.\r\n    RegisterSchema = yup.object({\r\n        email: yup.string().email('Invalid email address').required('Email is required'),\r\n        password: yup.string().required('Password is required'),\r\n        confirm_password: yup.string()\r\n            .oneOf([yup.ref('password'), null], \"Password does not match\")\r\n            .required('Password confirm is required'),\r\n    })\r\n    LoginSchema = yup.object({\r\n        email: yup.string().email('Invalid email address').required('Email is required'),\r\n        password: yup.string().required('Password is required'),\r\n    })\r\n\r\n    //When forms close, need to set the state of its parent(App) back to false.\r\n\r\n    switchToRegister = () => {\r\n        this.props.showLoginForm(false);\r\n        this.props.showRegisterForm(true);\r\n    }\r\n\r\n    switchToLogin = () => {\r\n        this.props.showRegisterForm(false);\r\n        this.props.showLoginForm(true);\r\n    }\r\n\r\n    hideRegisterForm = () => {\r\n        this.props.showRegisterForm(false);\r\n    };\r\n\r\n    hideLoginForm = () => {\r\n        this.props.showLoginForm(false);\r\n    }\r\n\r\n    //This function is to send the login request message to the back end server with corresponding messages: password, email address\r\n    //email address should be unique\r\n    handleSubmitLogin = (event, { setSubmitting }) => {\r\n        console.log(\"I'm in Login\")\r\n        const url = `${URL}/users/login`;\r\n        Axios({\r\n            method: 'POST',\r\n            url: url,\r\n            data: {\r\n                email: event.email,\r\n                password: event.password            }\r\n        })\r\n            .then(\r\n                response => {\r\n                    console.log(\"Response is: \", response)\r\n                    if (response.data.status === \"success\") {\r\n                        // localStorage.setItem(TOKEN_KEY, response.data.token);\r\n                        localStorage.setItem(ID, event.email);\r\n                        alert(\"Login Success\")\r\n                        this.props.loggedIn();\r\n                        this.props.showLoginForm(false);\r\n                    } else {\r\n                        if (response.data.message === \"Username does not exist\") {\r\n                            alert(\"Username does not exist\")\r\n                        } else if (response.data.message === \"Password not matched\") {\r\n                            alert(\"Wrong password\")\r\n                        }\r\n\r\n                        console.log(\"Login failed\");\r\n                    }\r\n                    setSubmitting(false);\r\n                }\r\n            )\r\n            .catch(\r\n                err => {\r\n                    console.log(\"Login failed\");\r\n                }\r\n            )\r\n    }\r\n\r\n    //This function is to send the register request message to the back end server with corresponding messages: username, password, email address\r\n    //email address should be unique\r\n    handleSubmitRegister = (event) => {\r\n        console.log(\"I'm in register\")\r\n        const url = `${URL}/users/register`\r\n        Axios({\r\n            method: 'POST',\r\n            url: url,\r\n            data: {\r\n                email: event.email,\r\n                password: event.password,\r\n                userName: event.userName\r\n            }\r\n        })\r\n            .then(\r\n                response => {\r\n                    if (response.data.status === \"success\") {\r\n                        this.switchToLogin();\r\n                    } else {\r\n                        if (response.data.message === \"Username already exists\") {\r\n                            alert(\"This email has been registered. Please log in\")\r\n                        }\r\n                    }\r\n                }\r\n            )\r\n            .catch(\r\n                response => {\r\n                    console.log('failed')\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\".login\">\r\n                {/* Modal is the pop up window */}\r\n                {<Modal show={this.props.isLoginForm} onHide={this.hideLoginForm}>\r\n\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Sign In</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        {/* Formik and yup are used to validate input of form */}\r\n                        <Formik\r\n                            validationSchema={this.LoginSchema}\r\n                            onSubmit={this.handleSubmitLogin}\r\n                            initialValues={{\r\n                                email: '',\r\n                                password: '',\r\n                            }}\r\n                        >\r\n                            {/* Form start here */}\r\n                            {({ handleSubmit,\r\n                                  handleChange,\r\n                                  touched,\r\n                                  errors }) => (<Form noValidate onSubmit={handleSubmit}>\r\n                                    <Form.Group controlId=\"formBasicEmail\">\r\n                                        <Form.Label>Email address</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"email\"\r\n                                            placeholder=\"Enter email\"\r\n                                            name='email'\r\n                                            onChange={handleChange}\r\n                                            isInvalid={!!errors.email && touched.email}\r\n                                        />\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.email}\r\n                                        </Form.Control.Feedback>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"formBasicPassword\">\r\n                                        <Form.Label>Password</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"password\"\r\n                                            placeholder=\"Password\"\r\n                                            name='password'\r\n                                            onChange={handleChange}\r\n                                            isInvalid={!!errors.password && touched.password}\r\n                                        />\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.password}\r\n                                        </Form.Control.Feedback>\r\n                                    </Form.Group>\r\n\r\n                                    <Button size=\"sm\" block=\"true\" variant=\"link\" onClick={this.switchToRegister}>\r\n                                        Not registered? Sign up\r\n                                    </Button> {' '}\r\n                                    <Button block=\"true\" className=\"Submit_Buttom\" variant=\"primary\" type=\"submit\">\r\n                                        Log in\r\n                                    </Button>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                    </Modal.Body>\r\n                </Modal>}\r\n\r\n                {<Modal show={this.props.isRegisterForm} onHide={this.hideRegisterForm}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Register</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n\r\n                        <Formik\r\n                            validationSchema={this.RegisterSchema}\r\n                            onSubmit={this.handleSubmitRegister}\r\n                            initialValues={{\r\n                                email: '',\r\n                                password: '',\r\n                                confirm_password: '',\r\n                            }}\r\n                        >\r\n                            {({ handleSubmit,\r\n                                  handleChange,\r\n                                  touched,\r\n                                  errors }) => (<Form noValidate onSubmit={handleSubmit}>\r\n                                    <Form.Group controlId=\"formUserName\">\r\n                                        <Form.Label>Email Address</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"email\"\r\n                                            placeholder=\"Enter email\"\r\n                                            name='email'\r\n                                            onChange={handleChange}\r\n                                            isInvalid={!!errors.email && touched.email}\r\n                                        />\r\n                                        <Form.Text className=\"text-muted\">\r\n                                            We'll never share your email with anyone else.\r\n                                        </Form.Text>\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.email}\r\n                                        </Form.Control.Feedback>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group controlId=\"formBasicEmail\">\r\n                                        <Form.Label>UserName</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            placeholder=\"UserName\"\r\n                                            name='userName'\r\n                                            onChange={handleChange}\r\n                                            isInvalid={!!errors.userName && touched.userName}\r\n                                        />\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.userName}\r\n                                        </Form.Control.Feedback>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group controlId=\"formBasicPassword\">\r\n                                        <Form.Label>Password</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"password\"\r\n                                            placeholder=\"Password\"\r\n                                            name='password'\r\n                                            onChange={handleChange}\r\n                                            isInvalid={!!errors.password && touched.password}\r\n                                        />\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.password}\r\n                                        </Form.Control.Feedback>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group controlId=\"formConfirmPassword\">\r\n                                        <Form.Label>Confirm Password</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"password\"\r\n                                            placeholder=\"Password\"\r\n                                            name='confirm_password'\r\n                                            onChange={handleChange}\r\n                                            isInvalid={!!errors.confirm_password && touched.confirm_password}\r\n                                        />\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.confirm_password}\r\n                                        </Form.Control.Feedback>\r\n                                    </Form.Group>\r\n                                    <Button size=\"sm\" block=\"true\" variant=\"link\" onClick={this.switchToLogin}>\r\n                                        Already Registered? Log in\r\n                                    </Button> {' '}\r\n                                    <Button block=\"true\" className=\"Submit_Buttom\" variant=\"primary\" type=\"submit\">\r\n                                        Join Us!\r\n                                    </Button>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                    </Modal.Body>\r\n                </Modal>}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","C:\\Users\\isamu\\Desktop\\GITHUB repos\\WebSiteBot_PS5\\uoft-contribution-frontend\\src\\components\\Home.js",["47","48"],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":2,"column":27,"nodeType":"55","messageId":"56","endLine":2,"endColumn":33},{"ruleId":"53","severity":1,"message":"57","line":8,"column":15,"nodeType":"55","messageId":"56","endLine":8,"endColumn":25},{"ruleId":"53","severity":1,"message":"58","line":6,"column":15,"nodeType":"55","messageId":"56","endLine":6,"endColumn":24},{"ruleId":"53","severity":1,"message":"59","line":6,"column":30,"nodeType":"55","messageId":"56","endLine":6,"endColumn":38},{"ruleId":"53","severity":1,"message":"60","line":5,"column":20,"nodeType":"55","messageId":"56","endLine":5,"endColumn":23},{"ruleId":"53","severity":1,"message":"61","line":5,"column":25,"nodeType":"55","messageId":"56","endLine":5,"endColumn":28},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'isLoggedIn' is assigned a value but never used.","'TOKEN_KEY' is defined but never used.","'PASSWORD' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","no-global-assign","no-unsafe-negation"]